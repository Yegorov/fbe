# MIT License
#
# Copyright (c) 2024-2025 Zerocracy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

(undef explain)
(defn explain '
  r = @operands[0].evaluate(fact, maps, fb);
  if !r && !$loog.nil?
    $loog.error(\'This rule failed: \' + self.to_s)
  end
  return r
  ')

(explain (when
  (exists _id)
  (and
    (unique _id)
    (eq "Integer" (type _id))
    (one _id))))

(explain (when
  (exists what)
  (and
    (matches what "^[a-z]+(-[a-z]+)*$")
    (one what))))

(explain (when
  (exists details)
  (and
    (one details)
    (not (matches details "  "))
    (not (matches details "^.{,24}$"))
    (not (matches details "[^.]$")))))

(explain (when
  (exists where)
  (and
    (one where)
    (eq "String" (type where))
    (or (eq "github" where) (eq "gitlab" where)))))

(explain (when
  (exists _time)
  (and
    (one _time)
    (eq "Time" (type _time)))))

(explain (when
  (exists _job)
  (and
    (one _job)
    (eq "Integer" (type _job)))))

(explain (when
  (exists _version)
  (and
    (one _version)
    (eq "String" (type _version)))))

(explain (when
  (exists why)
  (and
    (one why)
    (eq "String" (type why)))))

(explain (when
  (exists issue)
  (and
    (one issue)
    (eq "Integer" (type issue))
    (gt issue 0))))

(explain (when
  (exists repository)
  (and
    (one repository)
    (eq "Integer" (type repository))
    (gt repository 0))))

(explain (when
  (exists who)
  (and
    (one who)
    (eq "Integer" (type who))
    (gt who 0))))

(explain (when
  (exists when)
  (and
    (one when)
    (eq "Time" (type when)))))

(explain (when
  (exists issue)
  (exists repository)))

(explain (when
  (exists repository)
  (exists where)))

(explain (when
  (exists award)
  (and
    (one award)
    (eq "Integer" (type award))
    (exists when)
    (exists who)
    (exists why))))
